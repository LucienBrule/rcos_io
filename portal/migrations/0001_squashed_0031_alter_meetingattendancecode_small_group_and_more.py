# Generated by Django 4.1.4 on 2023-02-08 19:56

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import portal.models


class Migration(migrations.Migration):

    replaces = [
        ("portal", "0001_initial"),
        ("portal", "0002_alter_user_managers_alter_user_rcs_id"),
        ("portal", "0003_alter_user_managers"),
        ("portal", "0004_remove_project_portal_proj_name_ae220a_idx_and_more"),
        ("portal", "0005_organization_user_organization"),
        ("portal", "0006_project_organization_alter_user_organization"),
        ("portal", "0007_organization_discord_role_id_and_more"),
        ("portal", "0008_alter_user_options_alter_projecttag_name"),
        ("portal", "0009_semester_is_accepting_mentors_and_more"),
        ("portal", "0010_remove_mentorapplication_is_approved_and_more"),
        (
            "portal",
            "0011_remove_projectenrollmentapplication_approval_reasoning_and_more",
        ),
        ("portal", "0012_mentorapplication_user"),
        ("portal", "0013_semester_portal_seme_start_d_7649b7_idx"),
        ("portal", "0014_semester_portal_seme_start_d_c8b5dc_idx"),
        ("portal", "0015_remove_semester_is_accepting_mentors_and_more"),
        ("portal", "0016_alter_project_options_alter_smallgroup_options_and_more"),
        ("portal", "0017_remove_semester_mentor_application_deadline_and_more"),
        (
            "portal",
            "0018_rename_mentor_application_deadlines_semester_mentor_application_deadline",
        ),
        ("portal", "0019_alter_enrollment_options"),
        ("portal", "0020_alter_user_graduation_year"),
        ("portal", "0021_meetingattendancecode_portal_meet_code_a7947d_idx"),
        ("portal", "0022_enrollment_portal_enro_user_id_794ee8_idx_and_more"),
        ("portal", "0023_alter_enrollment_unique_together_and_more"),
        ("portal", "0024_project_logo_url"),
        ("portal", "0025_meeting_attendance_chance_verification_required_and_more"),
        ("portal", "0026_meeting_recording_url"),
        ("portal", "0027_meeting_is_attendance_taken"),
        ("portal", "0027_alter_project_description_alter_project_owner"),
        ("portal", "0028_merge_20230205_2042"),
        (
            "portal",
            "0029_remove_meetingattendancecode_unique_meeting_attendance_small_group_code_and_more",
        ),
        ("portal", "0030_alter_meetingattendancecode_small_group"),
        ("portal", "0031_alter_meetingattendancecode_small_group_and_more"),
    ]

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        verbose_name="primary email address",
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=False,
                        help_text="Identity is verified and can participate in RCOS",
                        verbose_name="approved?",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("rpi", "RPI"), ("external", "External")],
                        default="external",
                        max_length=30,
                    ),
                ),
                (
                    "rcs_id",
                    models.CharField(
                        blank=True,
                        help_text="If the user is an RPI user, their RCS ID.",
                        max_length=30,
                        unique=True,
                        verbose_name="RCS ID",
                    ),
                ),
                (
                    "graduation_year",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="If the user is an RPI user, their graduation year.",
                        null=True,
                    ),
                ),
                (
                    "discord_user_id",
                    models.CharField(
                        blank=True,
                        help_text="The user's Discord account ID from the Discord API",
                        max_length=200,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "github_username",
                    models.CharField(
                        blank=True,
                        help_text="The user's GitHub username (not user ID)",
                        max_length=200,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["first_name", "last_name", "email"],
            },
            managers=[
                ("objects", portal.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Meeting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="The optional title of the meeting",
                        max_length=100,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("small_group", "Small Group"),
                            ("large_group", "Large Group"),
                            ("workshop", "Workshop"),
                            ("mentor", "Mentor"),
                            ("coordinator", "Coordinator"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "is_published",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the meeting is visible to users",
                        verbose_name="published?",
                    ),
                ),
                (
                    "starts_at",
                    models.DateTimeField(help_text="When the meeting starts"),
                ),
                ("ends_at", models.DateTimeField(help_text="When the meeting ends")),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        help_text="Where the meeting takes place either physically or virtually",
                        max_length=500,
                    ),
                ),
                (
                    "description_markdown",
                    models.TextField(
                        blank=True,
                        help_text="Optional publicly displayed description for the meeting. Supports Markdown.",
                        max_length=10000,
                    ),
                ),
                (
                    "presentation_url",
                    models.URLField(
                        blank=True,
                        help_text="The URL to the meeting's slideshow presentation if exists",
                    ),
                ),
                ("discord_event_id", models.CharField(blank=True, max_length=23)),
            ],
            options={
                "ordering": ["starts_at"],
                "get_latest_by": ["starts_at"],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("slug", models.SlugField()),
                (
                    "name",
                    models.CharField(
                        help_text="The project's unique name",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the project has been approved by Mentors/Coordinators to participate in RCOS",
                        verbose_name="approved?",
                    ),
                ),
                (
                    "summary",
                    models.CharField(
                        blank=True,
                        help_text="One-line summary of the project",
                        max_length=100,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="A description of the project", max_length=10000
                    ),
                ),
                (
                    "external_chat_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL to an external chat that this project uses",
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        blank=True,
                        help_text="Optional URL to a homepage for the project, potentially where it is publicly deployed or to documentation",
                    ),
                ),
                ("discord_role_id", models.CharField(blank=True, max_length=200)),
                (
                    "discord_text_channel_id",
                    models.CharField(blank=True, max_length=200),
                ),
                (
                    "discord_voice_channel_id",
                    models.CharField(blank=True, max_length=200),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        help_text="The user that can make edits to the project",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_projects",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "get_latest_by": "created_at",
            },
        ),
        migrations.CreateModel(
            name="ProjectTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Semester",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.CharField(
                        help_text="The unique ID of the semseter in RPI's format of YYYYMM where YYYY is the starting year and MM is the starting month.",
                        max_length=6,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="User-facing name of semester, e.g. Fall 2022",
                        max_length=30,
                    ),
                ),
                (
                    "is_accepting_new_projects",
                    models.BooleanField(
                        default=False,
                        help_text="Whether new projects can be proposed for this semester",
                        verbose_name="accepting new projects?",
                    ),
                ),
                (
                    "start_date",
                    models.DateField(
                        help_text="The first day of the semester according to the RPI Academic Calendar: https://info.rpi.edu/registrar/academic-calendar",
                        verbose_name="first day",
                    ),
                ),
                (
                    "end_date",
                    models.DateField(
                        help_text="The last day of the semester according to the RPI Academic Calendar: https://info.rpi.edu/registrar/academic-calendar",
                        verbose_name="last day",
                    ),
                ),
            ],
            options={
                "ordering": ["-start_date"],
            },
        ),
        migrations.CreateModel(
            name="StatusUpdate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Optional title to display on Status Update page",
                        max_length=200,
                    ),
                ),
                (
                    "opens_at",
                    models.DateTimeField(
                        help_text="The date and time the status update opens for submissions"
                    ),
                ),
                (
                    "closes_at",
                    models.DateTimeField(
                        help_text="The date and time the status update stops accepting submissions"
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_updates",
                        to="portal.semester",
                    ),
                ),
            ],
            options={
                "ordering": ("semester", "opens_at"),
                "get_latest_by": "opens_at",
            },
        ),
        migrations.CreateModel(
            name="StatusUpdateSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("previous_week", models.TextField(max_length=10000)),
                ("next_week", models.TextField(max_length=10000)),
                ("blockers", models.TextField(max_length=10000)),
                (
                    "grade",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="The grade assigned to this submission",
                        max_digits=1,
                        null=True,
                    ),
                ),
                (
                    "grader_comments",
                    models.TextField(
                        blank=True,
                        help_text="Optional comments from the grader to the submitter",
                        max_length=10000,
                    ),
                ),
                (
                    "grader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_status_update_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "status_update",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="portal.statusupdate",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="status_update_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="SmallGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Public-facing name of the Small Group",
                        max_length=100,
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        help_text="The location the Small Group meets for Small Group meetings",
                        max_length=200,
                    ),
                ),
                ("discord_category_id", models.CharField(blank=True, max_length=200)),
                ("discord_role_id", models.CharField(blank=True, max_length=200)),
                (
                    "mentors",
                    models.ManyToManyField(
                        related_name="mentored_small_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "projects",
                    models.ManyToManyField(
                        related_name="small_groups", to="portal.project"
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="small_groups",
                        to="portal.semester",
                    ),
                ),
            ],
            options={
                "ordering": ["semester", "name", "location"],
            },
        ),
        migrations.CreateModel(
            name="ProjectRepository",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("url", models.URLField(help_text="URL of GitHub repository")),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="repositories",
                        to="portal.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProjectProposal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "url",
                    models.URLField(help_text="Link to the actual proposal document"),
                ),
                (
                    "grade",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="The grade assigned to this proposal",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "grader_comments",
                    models.TextField(
                        blank=True,
                        help_text="Optional comments from the grader",
                        max_length=10000,
                    ),
                ),
                (
                    "grader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_project_proposals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="proposals",
                        to="portal.project",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_proposals",
                        to="portal.semester",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ProjectPresentation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("url", models.URLField(help_text="Link to the actual presentation")),
                (
                    "grade",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="The grade assigned to this presentation",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "grader_comments",
                    models.TextField(
                        blank=True,
                        help_text="Optional comments from the grader",
                        max_length=10000,
                    ),
                ),
                (
                    "grader",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_project_presentations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="presentations",
                        to="portal.project",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_presentations",
                        to="portal.semester",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="project",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="projects", to="portal.projecttag"
            ),
        ),
        migrations.CreateModel(
            name="MeetingAttendanceCode",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "code",
                    models.CharField(max_length=20, primary_key=True, serialize=False),
                ),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_codes",
                        to="portal.meeting",
                    ),
                ),
                (
                    "small_group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attendance_codes",
                        to="portal.smallgroup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MeetingAttendance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_verified", models.BooleanField(default=True)),
                (
                    "is_added_by_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this attendance was added by an admin instead of by the user",
                    ),
                ),
                (
                    "meeting",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="portal.meeting"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="meeting",
            name="attendances",
            field=models.ManyToManyField(
                related_name="meeting_attendances",
                through="portal.MeetingAttendance",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="host",
            field=models.ForeignKey(
                blank=True,
                help_text="Optional host for the meeting (e.g. mentor hosting a workshop",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="semester",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="meetings",
                to="portal.semester",
            ),
        ),
        migrations.CreateModel(
            name="Enrollment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "credits",
                    models.IntegerField(
                        default=0,
                        help_text="How many course credits the user is participating in RCOS for this semester. 0 means just for experience.",
                    ),
                ),
                (
                    "is_for_pay",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user is participating in RCOS for pay instead of course credit",
                        verbose_name="for pay?",
                    ),
                ),
                (
                    "is_project_lead",
                    models.BooleanField(default=False, verbose_name="project lead?"),
                ),
                (
                    "is_coordinator",
                    models.BooleanField(default=False, verbose_name="coordinator?"),
                ),
                (
                    "is_faculty_advisor",
                    models.BooleanField(default=False, verbose_name="faculty advisor?"),
                ),
                (
                    "final_grade",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="The user's final grade for this semester (if taken for credits)",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "notes_markdown",
                    models.TextField(
                        blank=True,
                        help_text="Private notes for admins about this user for this semester",
                        max_length=10000,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="enrollments",
                        to="portal.project",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to="portal.semester",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="enrollments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["semester"],
                "get_latest_by": ["semester"],
            },
        ),
        migrations.CreateModel(
            name="ProjectPitch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "url",
                    models.URLField(
                        help_text="Direct link to the pitch presentation (usually a Google Slides link)",
                        verbose_name="Presentation URL",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pitches",
                        to="portal.project",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_pitches",
                        to="portal.semester",
                    ),
                ),
            ],
            options={
                "unique_together": {("semester", "project")},
            },
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["name", "summary", "description"],
                name="portal_proj_name_ae220a_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="meetingattendancecode",
            unique_together={("code", "meeting", "small_group")},
        ),
        migrations.AlterUniqueTogether(
            name="meetingattendance",
            unique_together={("meeting", "user")},
        ),
        migrations.AlterUniqueTogether(
            name="enrollment",
            unique_together={("semester", "user")},
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_approved"], name="portal_user_is_appr_2439f2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="portal_user_email_8d6b8e_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["rcs_id"], name="portal_user_rcs_id_47e388_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["first_name", "last_name"],
                name="portal_user_first_n_13e075_idx",
            ),
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[
                ("students", portal.models.RPIUserManager()),
                ("objects", portal.models.UserManager()),
            ],
        ),
        migrations.AlterField(
            model_name="user",
            name="rcs_id",
            field=models.CharField(
                blank=True,
                help_text="If the user is an RPI user, their RCS ID.",
                max_length=30,
                null=True,
                unique=True,
                verbose_name="RCS ID",
            ),
        ),
        migrations.AlterModelManagers(
            name="user",
            managers=[
                ("objects", portal.models.UserManager()),
            ],
        ),
        migrations.RemoveIndex(
            model_name="project",
            name="portal_proj_name_ae220a_idx",
        ),
        migrations.RemoveField(
            model_name="project",
            name="summary",
        ),
        migrations.AddIndex(
            model_name="project",
            index=models.Index(
                fields=["name", "description"], name="portal_proj_name_d81550_idx"
            ),
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "email_domain",
                    models.CharField(
                        blank=True,
                        help_text="The email domain used to auto-associate users to this org.",
                        max_length=100,
                    ),
                ),
                (
                    "email_domain_secondary",
                    models.CharField(
                        blank=True,
                        help_text="A secondary email domain used to auto-associate users to this org.",
                        max_length=100,
                    ),
                ),
                (
                    "homepage_url",
                    models.URLField(
                        help_text="The public homepage of the organization."
                    ),
                ),
                ("discord_role_id", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="user",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                help_text="The organization this user belongs to (optional)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="users",
                to="portal.organization",
            ),
        ),
        migrations.AlterModelOptions(
            name="user",
            options={"ordering": ["first_name", "last_name"]},
        ),
        migrations.AlterField(
            model_name="projecttag",
            name="name",
            field=models.CharField(max_length=100, unique=True),
        ),
        migrations.AddField(
            model_name="semester",
            name="is_accepting_mentors",
            field=models.BooleanField(
                default=False,
                help_text="Whether users can apply to be Mentors for this semester",
                verbose_name="accepting mentor applications?",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="external_chat_url",
            field=models.URLField(
                blank=True,
                help_text="Optional URL to an external chat that this project uses (e.g. a Discord invite link)",
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="organization",
            field=models.ForeignKey(
                blank=True,
                help_text="The external organization this project belongs to",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="projects",
                to="portal.organization",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="owner",
            field=models.ForeignKey(
                help_text="The user that can edit the project",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="owned_projects",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="semester",
            name="name",
            field=models.CharField(
                help_text="User-facing name of semester, e.g. Fall 2024", max_length=30
            ),
        ),
        migrations.CreateModel(
            name="ProjectEnrollmentApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_accepted", models.BooleanField(default=None, null=True)),
                (
                    "why",
                    models.TextField(
                        help_text="Why you want to join the project?", max_length=10000
                    ),
                ),
                (
                    "experience",
                    models.TextField(
                        help_text="What prior knowledge/experience related to this project do you have?",
                        max_length=10000,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="enrollment_applications",
                        to="portal.project",
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_enrollment_applications",
                        to="portal.semester",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="project_enrollment_applications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "rejection_reason",
                    models.CharField(
                        blank=True,
                        help_text="Why the project lead rejected the application",
                        max_length=200,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="MentorApplication",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "why",
                    models.TextField(
                        help_text="Why do you want to be a Mentor?", max_length=10000
                    ),
                ),
                (
                    "semester",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentor_applications",
                        to="portal.semester",
                    ),
                ),
                (
                    "skills",
                    models.ManyToManyField(
                        blank=True,
                        help_text="What skills can you offer help for?",
                        related_name="mentors",
                        to="portal.projecttag",
                    ),
                ),
                (
                    "is_accepted",
                    models.BooleanField(
                        default=None,
                        help_text="Was this application accepted",
                        null=True,
                        verbose_name="accepted?",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentor_applications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddIndex(
            model_name="semester",
            index=models.Index(
                fields=["start_date", "end_date"], name="portal_seme_start_d_7649b7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="semester",
            index=models.Index(
                fields=["start_date"], name="portal_seme_start_d_c8b5dc_idx"
            ),
        ),
        migrations.RemoveField(
            model_name="semester",
            name="is_accepting_mentors",
        ),
        migrations.RemoveField(
            model_name="semester",
            name="is_accepting_new_projects",
        ),
        migrations.AddField(
            model_name="semester",
            name="enrollment_deadline",
            field=models.DateTimeField(
                blank=True,
                help_text="The last date users can enroll in the semester (not with a project yet)",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="semester",
            name="project_enrollment_application_deadline",
            field=models.DateTimeField(
                blank=True,
                help_text="The last date users can apply to a project",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="semester",
            name="project_pitch_deadline",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="semester",
            name="project_proposal_deadline",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name="projectpresentation",
            unique_together={("semester", "project")},
        ),
        migrations.AlterUniqueTogether(
            name="projectproposal",
            unique_together={("semester", "project")},
        ),
        migrations.AlterModelOptions(
            name="project",
            options={
                "get_latest_by": "created_at",
                "ordering": [django.db.models.functions.text.Lower("name")],
            },
        ),
        migrations.AlterModelOptions(
            name="smallgroup",
            options={
                "ordering": [
                    "semester",
                    django.db.models.functions.text.Lower("name"),
                    "location",
                ]
            },
        ),
        migrations.AlterModelOptions(
            name="user",
            options={
                "ordering": [
                    django.db.models.functions.text.Lower("first_name"),
                    django.db.models.functions.text.Lower("last_name"),
                ]
            },
        ),
        migrations.AddField(
            model_name="enrollment",
            name="is_mentor",
            field=models.BooleanField(default=False, verbose_name="mentor?"),
        ),
        migrations.AddField(
            model_name="semester",
            name="mentor_application_deadline",
            field=models.DateTimeField(
                blank=True,
                help_text="The last date students can apply to be Mentors for this semester",
                null=True,
            ),
        ),
        migrations.AlterModelOptions(
            name="enrollment",
            options={
                "get_latest_by": ["semester"],
                "ordering": ["semester", "user__first_name"],
            },
        ),
        migrations.AlterField(
            model_name="user",
            name="graduation_year",
            field=models.PositiveIntegerField(
                blank=True,
                help_text="If the user is an RPI user, their graduation year.",
                null=True,
                validators=[
                    django.core.validators.MaxValueValidator(2028),
                    django.core.validators.MinValueValidator(1950),
                ],
            ),
        ),
        migrations.AddIndex(
            model_name="meetingattendancecode",
            index=models.Index(fields=["code"], name="portal_meet_code_a7947d_idx"),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["user", "semester"], name="portal_enro_user_id_794ee8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(fields=["user"], name="portal_enro_user_id_c0e760_idx"),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["semester"], name="portal_enro_semeste_4fab39_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="enrollment",
            index=models.Index(
                fields=["semester", "project"], name="portal_enro_semeste_508d3f_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="enrollment",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="meetingattendance",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="meetingattendancecode",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="projectpitch",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="projectpresentation",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="projectproposal",
            unique_together=set(),
        ),
        migrations.AddConstraint(
            model_name="enrollment",
            constraint=models.UniqueConstraint(
                fields=("semester", "user"), name="unique_semester_enrollment"
            ),
        ),
        migrations.AddConstraint(
            model_name="meetingattendance",
            constraint=models.UniqueConstraint(
                fields=("meeting", "user"), name="unique_meeting_attendance"
            ),
        ),
        migrations.AddConstraint(
            model_name="meetingattendancecode",
            constraint=models.UniqueConstraint(
                fields=("code", "meeting", "small_group"),
                name="unique_meeting_attendance_small_group_code",
            ),
        ),
        migrations.AddConstraint(
            model_name="mentorapplication",
            constraint=models.UniqueConstraint(
                fields=("semester", "user"), name="unique_mentor_application"
            ),
        ),
        migrations.AddConstraint(
            model_name="projectenrollmentapplication",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_accepted", True)),
                fields=("semester", "user"),
                name="unique_accepted_application",
            ),
        ),
        migrations.AddConstraint(
            model_name="projectpitch",
            constraint=models.UniqueConstraint(
                fields=("semester", "project"), name="unique_semester_pitch"
            ),
        ),
        migrations.AddConstraint(
            model_name="projectpresentation",
            constraint=models.UniqueConstraint(
                fields=("semester", "project"), name="unique_semester_presentation"
            ),
        ),
        migrations.AddConstraint(
            model_name="projectproposal",
            constraint=models.UniqueConstraint(
                fields=("semester", "project"), name="unique_semester_proposal"
            ),
        ),
        migrations.AddField(
            model_name="project",
            name="logo_url",
            field=models.URLField(
                blank=True, help_text="Optional URL to a logo for the project"
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="attendance_chance_verification_required",
            field=models.DecimalField(
                decimal_places=2,
                default=Decimal("0.25"),
                help_text="The % chance that a student submitting attendance will have to be verified (as a decimal)",
                max_digits=3,
            ),
        ),
        migrations.AlterField(
            model_name="meeting",
            name="discord_event_id",
            field=models.CharField(
                blank=True,
                help_text="Automatically managed, do not touch!",
                max_length=23,
            ),
        ),
        migrations.AlterField(
            model_name="meeting",
            name="host",
            field=models.ForeignKey(
                blank=True,
                help_text="Optional host for the meeting (e.g. mentor hosting a workshop)",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="recording_url",
            field=models.URLField(
                blank=True, help_text="The URL to the meeting's recording (optional)"
            ),
        ),
        migrations.AddField(
            model_name="meeting",
            name="is_attendance_taken",
            field=models.BooleanField(
                default=True,
                help_text="Whether attendance is taken at this meeting. If false, all expected users are counted as attended.",
                verbose_name="attendance taken?",
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="description",
            field=models.TextField(
                blank=True, help_text="A description of the project", max_length=10000
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="owner",
            field=models.ForeignKey(
                blank=True,
                help_text="The user that can edit the project",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="owned_projects",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveConstraint(
            model_name="meetingattendancecode",
            name="unique_meeting_attendance_small_group_code",
        ),
        migrations.AddConstraint(
            model_name="meetingattendancecode",
            constraint=models.UniqueConstraint(
                fields=("meeting", "small_group"),
                name="unique_meeting_attendance_small_group_code",
            ),
        ),
        migrations.AlterField(
            model_name="meetingattendancecode",
            name="small_group",
            field=models.ForeignKey(
                blank=True,
                default="",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attendance_codes",
                to="portal.smallgroup",
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="meetingattendancecode",
            name="small_group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attendance_codes",
                to="portal.smallgroup",
            ),
        ),
        migrations.AddIndex(
            model_name="meetingattendancecode",
            index=models.Index(
                fields=["meeting"], name="portal_meet_meeting_10702e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meetingattendancecode",
            index=models.Index(
                fields=["meeting", "small_group"], name="portal_meet_meeting_04b0e3_idx"
            ),
        ),
    ]
